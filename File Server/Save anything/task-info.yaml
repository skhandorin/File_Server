type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.Objects;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File file = new File(serverDataPath);
            int numOfFilesBeforeAdding = Objects.requireNonNull(file.listFiles()).length;

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Objects.requireNonNull(file.listFiles()).length;

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File file = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Objects.requireNonNull(file.listFiles()).length;

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");
            int numOfFilesAfterDeletingByName = Objects.requireNonNull(file.listFiles()).length;
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);
            int numOfFilesAfterDeletingById = Objects.requireNonNull(file.listFiles()).length;

            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);
            for (File file : Objects.requireNonNull(dir.listFiles())) {
                if (file.getName().startsWith("test_purpose_")) {
                    boolean isDeleted = file.delete();
                    if (!isDeleted) {
                        throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                    }
                }
            }
            File cdir = new File(FileServerTest.clientDataPath);
            for (File file : Objects.requireNonNull(cdir.listFiles())) {
                if (file.getName().startsWith("test_purpose_")) {
                    boolean isDeleted = file.delete();
                    if (!isDeleted) {
                        throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName)));
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/server/FileServer.java
  visible: true
  text: |
    package server;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;

    public class FileServer {
        private final Path rootDir;

        public FileServer(Path rootDir) {
            this.rootDir = rootDir;
            try {
                Files.createDirectories(rootDir);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public boolean put(String filename, String fileContent) {
            Path file = rootDir.resolve(filename);
            if (Files.exists(file)) {
                return false;
            }
            try {
                Files.writeString(file, fileContent);
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
            return true;
        }

        public boolean delete(String filename) {
            Path file = rootDir.resolve(filename);
            try {
                return Files.deleteIfExists(file);
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }

        public String get(String filename) {
            Path file = rootDir.resolve(filename);
            if (!Files.exists(file)) {
                return null;
            }
            try {
                return Files.readString(file);
            } catch (IOException e) {
                e.printStackTrace();
                return null;
            }
        }
    }
  learner_created: true
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.util.Scanner;

    public class Main {

        private static final String ADDRESS = "127.0.0.1";
        private static final int PORT = 23456;

        public static final String GET = "1";
        public static final String PUT = "2";
        public static final String DELETE = "3";
        public static final String EXIT = "exit";
        public static final String EXIT_REQ = "EXIT";
        public static final String PUT_REQ = "PUT";
        public static final String GET_REQ = "GET";
        public static final String DELETE_REQ = "DELETE";

        private static final int OK = 200;
        private static final int BAD_REQUEST = 400;
        private static final int FORBIDDEN = 403;
        private static final int NOT_FOUND = 404;

        public static void main(String[] args) {

            final Scanner scanner = new Scanner(System.in);

            System.out.print("Enter action (1 - get a file, 2 - create a file, 3 - delete a file): ");
            String action = scanner.nextLine();

            String filename = null;
            String fileContent;
            String request = null;
            if (!action.equals(EXIT)) {
                System.out.print("Enter filename: ");
                filename = scanner.nextLine();
            }

            try (
                    Socket socket = new Socket(InetAddress.getByName(ADDRESS), PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            ) {

                switch (action) {
                    case PUT:
                        System.out.print("Enter file content: ");
                        fileContent = scanner.nextLine();
                        request = PUT_REQ + " " + filename + " " + fileContent;
                        break;
                    case GET:
                        request = GET_REQ + " " + filename;
                        break;
                    case DELETE:
                        request = DELETE_REQ + " " + filename;
                        break;
                    case EXIT:
                        request = EXIT_REQ;
                        break;
                    default:
                        System.out.println("Unknown command");
                        System.exit(1);
                }

                output.writeUTF(request);
                System.out.println("The request was sent.");
                if (action.equals(EXIT)) {
                    return;
                }

                String response = input.readUTF();
    //            System.out.println("Received: " + response);

                final Scanner responseScanner = new Scanner(response);
                int responseCode = responseScanner.nextInt();
                String userResponse;

                switch (action) {
                    case PUT:
                        userResponse = responseCode == OK ?
                                "The response says that the file was created!"
                                : "The response says that creating the file was forbidden!";
                        break;
                    case GET:
                        userResponse = responseCode == OK ?
                                "The content of the file is: " + responseScanner.nextLine().substring(1)
                                : "The response says that the file was not found!";
                        break;
                    case DELETE:
                        userResponse = responseCode == OK ?
                                "The response says that the file was successfully deleted!"
                                : "The response says that the file was not found!";
                        break;
                    default:
                        userResponse = "Unknown response! Hmmm...";
                        break;
                }

                System.out.println(userResponse);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/server/WebServer.java
  visible: true
  learner_created: true
- name: src/server/data/_FileServerData.ser
  visible: true
  learner_created: true
- name: src/client/Action.java
  visible: true
  learner_created: true
- name: src/client/ServerRequest.java
  visible: true
  learner_created: true
- name: src/client/ServerResponse.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/52/stages/286/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 23 Feb 2021 09:41:15 UTC
record: -1
